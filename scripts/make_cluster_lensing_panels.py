#!/usr/bin/env python3
"""
Assemble cluster lensing panels from per-cluster PNGs generated by
scripts/make_cluster_lensing_profiles.py.

Outputs:
- figures/cluster_kappa_profiles_panel.png
- figures/cluster_alpha_profiles_panel.png

Layout defaults for 12 clusters (3x4). Adjust --rows/--cols as needed.
"""
from __future__ import annotations
import argparse
from pathlib import Path
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import pandas as pd


def load_img_or_none(p: Path):
    try:
        return mpimg.imread(p)
    except Exception:
        return None


def make_panel(img_dir: Path, names: list[str], suffix: str, out_path: Path, rows: int, cols: int, title: str):
    out_path.parent.mkdir(parents=True, exist_ok=True)
    # Keep total size within typical CI preview limits; adjust per cell size
    cell_w, cell_h = 3.0, 2.5
    fig, axes = plt.subplots(rows, cols, figsize=(cols*cell_w, rows*cell_h))
    axes = np.atleast_2d(axes).reshape(rows, cols)
    idx = 0
    for r in range(rows):
        for c in range(cols):
            ax = axes[r, c]
            ax.axis('off')
            if idx < len(names):
                name = names[idx]
                p = img_dir / f"{name}{suffix}"
                img = load_img_or_none(p)
                if img is not None:
                    ax.imshow(img)
                    ax.set_title(name, fontsize=9)
            idx += 1
    if title:
        fig.suptitle(title, fontsize=12)
    fig.tight_layout(rect=(0, 0, 1, 0.96) if title else None)
    fig.savefig(out_path, dpi=160)
    plt.close(fig)


def main():
    ap = argparse.ArgumentParser(description='Build cluster lensing panels from per-cluster figures')
    ap.add_argument('--catalog', default=str(Path('data')/'clusters'/'master_catalog.csv'))
    ap.add_argument('--img_dir', default=str(Path('data')/'clusters'/'figures'))
    ap.add_argument('--rows', type=int, default=3)
    ap.add_argument('--cols', type=int, default=4)
    ap.add_argument('--out_kappa', default=str(Path('figures')/'cluster_kappa_profiles_panel.png'))
    ap.add_argument('--out_alpha', default=str(Path('figures')/'cluster_alpha_profiles_panel.png'))
    args = ap.parse_args()

    cat = pd.read_csv(args.catalog)
    name_col = [c for c in cat.columns if c.lower() == 'cluster_name']
    if not name_col:
        raise SystemExit("Catalog missing 'cluster_name'")
    names = [str(x) for x in cat[name_col[0]].tolist()]

    img_dir = Path(args.img_dir)
    make_panel(img_dir, names, '_kappa_profiles.png', Path(args.out_kappa), args.rows, args.cols,
               'Convergence κ(R) — GR(baryons), GR+DM, Σ-Gravity')
    make_panel(img_dir, names, '_alpha_profiles.png', Path(args.out_alpha), args.rows, args.cols,
               'Deflection α(R) with α=R and θ_E markers')

if __name__ == '__main__':
    main()
